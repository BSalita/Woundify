// Houndify Console App.

// todo: high priority Wpf, UWP
// 1. implement Wpf
// 2. implement Console.Write for UWP 

// todo: lower priority
// 1. implement geolocation for in Windows Console app.
// 2. remove instances of type dynamic. it's throwing beign exceptions which can confuse devs. otherwise find way to surpress messages(?).
// 3. Support non-English
// 4. Offer IPA or other pronunciation forms via web API calls.
// 6. Implement Delete using tempFolder. Try to solve problem of sometimes using tempFolder outside of Helpers
// 7. Make ready for translation: use String.Format and put strings in resources.
// 8. redesign Log class. pass verbose level, option to supress method (line).
// 9. Implement POP and POPALL. Show stack.
// 10. Give credit to any code gotten from other sources such as bing.cs, audioplayer.cs.
// 11. Implement amazon's speech-to-text, text-to-speech.
// 12. Implement translation from locale to en-us and en-us response to locale.
// 13. Flesh out Help.
// 14. Give speaker ability to HELP, QUIT or END using speech.
// 15. E remove Try/Catch in async?
// 16. Implement Amazon STT service.
// 17. Implement Project Oxford speech.
// 18. Get subscription to https://cris.ai/ and implement. Already made a request for beta invite on 2 Jan 2016.
// 19. What is Acoustic Model Specialization Service? Is that Project Oxford or what? What does it do? Should I be interested?
// 20. Change bing code to use this example code: https://onedrive.live.com/prev?id=9a8c02c3b59e575!115&cid=09A8C02C3B59E575&parId=root&authkey=!AOE9yiNn9bOskFE&v=TextFileEditor
// 31. dynamically transcode wav file recorded in non 16000/16/1 format.
// 32. don't exit until async STT have completed
// 33. Return API's entire response? Return just a portion of the response but how to let the user specify which part is desired?

// Document
// 1. Dependencies: Visual Studio 2015. Windows 7/8/8.1 compatible APIs; System.Net.Http, System Speech, NAudio (Nuget), Newtonsoft.Json (Nuget)
// 2. UWP: Go to Package.appxmanifest->Capabilities and enable the following: Internet (Client), Location, Microphone
// 3. Microsoft.Speech doesn't take dictation input as it doesn't offer a grammar
// 4. Wait for JUNK chunk fix or fix file yourself. Can't synthesis speech in UWP until done. Gives "Whatever" error in houndify.
// 5. (see above)Getting 'Microsoft.CSharp.RuntimeBinder.RuntimeBinderException' until dynamic type is changed to strongly typed class
// 6. Microsoft's System.Speech APIs do a bad job of speech recognition. Using google STT instead.
// 7. document commands, options, json file, overrides hierarchy
// 8. document useful command sequences
// 9. Geolocation not implmented in Windows 8 app. Will use settings.json file.
// 10. Learn how to add TTS voices
// 11. installation procedure
// 12. Sign up at http://www.projectoxford.ai to get a subscription key. Use the subscription key as ClientSecret in settings file.
// 13. Sign up with google at ... to get ClientSecret, ... 
// 14. Sign up with Houndify at www...
// 15. explain each command, variations, optional arguments.
// 16. enter useful command sequences into help display
// 17. Listen pushes a wave file (audio) whereas WakeUp first converts to text before pushing. This is because WakeUp needs to convert to text to understand the wakeup word.
// 18. ignore - warning CS1998: This async method lacks 'await' operators and will run synchronously. Consider using the 'await' operator to await non-blocking API calls, or 'await Task.Run(...)' to do CPU-bound work on a background thread.
// 19 . make list of all commands and their variations. Test.

